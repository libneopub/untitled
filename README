u.roblog.nl
a microblog running neopub2

supports:
- captioned images
- short posts < 700 unicode chars
- captioned code (list gists)

also:
- replies (w. webmentions & pingbacks)

Easy publishing from my phone. Hit icon, type something, attach picture, post.

Easy publishing from my laptop. Writing post in Markdown in Neovim, pasting
images (automatically uploading to u.roblog.nl)

  pub < post.txt
  pub -i image.png
  pub -i graph.png -n # uploads the image but doesn't include it in the feeds,
  useful for including images in a post
  echo "caption" | pub -i another.png
  echo "caption" | pub -c main.c

optional -c flag copies the url to keyboard. otherwise, write to stdout.

implementation:
the micropub endpoint saves some metadata about the posts in a huge json file:

{
   id: uuid,
   type: "image",
   path: "images/path-to-image.jpg",
   caption: "Some caption",
},
{
   id: uuid,
   type: "post",
   path: "2024-01-01T12:00:00.txt"
},
{
   id: uuid,
   type: "code",
   path: "main.c",
   caption: "Hangman in 3 lines of C."
},
{
   id: uuid,
   type: "reply",
   path: "2024-01-01T13:00:00.txt",
   reply-to: "http://..."
}

the files are either saved by the given filename (if uploaded thru the cli),
or by an autogenerated timestamp from the app.

the json file maps the filename to an id and maybe a caption.

maybe:

see site as folder. some sort of (fuse?) filesystem to manage the site.
editing a file updates the site (because we're serving from this directory). 
renaming it should update the json file.
putting a file in the folder adds an entry to the json file.
deleting a file should remove an entry.

the files are kept as-is on disk, but transformed in the web layer.
forexample markdown or docx -> html. depends on the file extension. a cache should be
kept. if a file with as filename the hash of the file is found, serve that
instead of transforming on-the-fly.
